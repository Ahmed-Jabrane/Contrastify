import matplotlib.pyplot as plt
import matplotlib.patches as mpatches


def hex_to_rgb(hex_color):
    """
    Convert a HEX color string to an RGB tuple.

    Parameters:
    - hex_color: HEX color string (e.g., "#FFFFFF" or "FFFFFF").

    Returns:
    - Tuple of (R, G, B) values ranging from 0 to 255.
    """
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def validate_rgb(color):
    """
    Validate if the given tuple represents a valid RGB color.

    Parameters:
    - color: Tuple of (R, G, B) values.

    Returns:
    - Boolean indicating if the tuple is a valid RGB color.
    """
    if not isinstance(color, tuple) or len(color) != 3:
        return False
    return all(0 <= value <= 255 for value in color)

def validate_hex(hex_color):
    """
    Validate if the given string represents a valid HEX color.

    Parameters:
    - hex_color: HEX color string.

    Returns:
    - Boolean indicating if the string is a valid HEX color.
    """
    if not isinstance(hex_color, str):
        return False
    hex_color = hex_color.lstrip('#')
    return len(hex_color) == 6 and all(c in '0123456789ABCDEFabcdef' for c in hex_color)


def generate_shades(base_color, steps=10, color_name="color", min_intensity=0.2):
    """
    Generate a series of shades for a given base color without reaching full white.

    Parameters:
    - base_color: Tuple of (R, G, B) values ranging from 0 to 255.
    - steps: Number of shades to generate (default is 10).
    - color_name: Base name for the colors (default is "color").
    - min_intensity: Minimum intensity factor to avoid full white (default is 0.2).

    Returns:
    - List of tuples containing RGB color and label (e.g., [(RGB, "color.100"), ...]).
    """
    shades = []
    for i in range(steps, -1, -1):
        factor = min_intensity + (i / steps) * (1 - min_intensity)
        shade = tuple(int(base_color[j] * factor + 255 * (1 - factor)) for j in range(3))
        shades.append((shade, f"{color_name}.{i * 10}"))
    return shades



def display_color_palette(shades):
    """
    Display a palette of generated shades with labels.

    Parameters:
    - shades: List of tuples containing RGB color and label (generated by `generate_shades`).
    """
    fig, ax = plt.subplots(figsize=(2, len(shades) * 0.5))
    for i, (color, label) in enumerate(shades):
        rgb_fraction = tuple(x / 255 for x in color)
        ax.add_patch(plt.Rectangle((0, i), 1, 1, color=rgb_fraction))
        ax.text(1.2, i + 0.5, label, va='center')
    ax.set_xlim(0, 2)
    ax.set_ylim(0, len(shades))
    ax.axis("off")
    plt.show()
